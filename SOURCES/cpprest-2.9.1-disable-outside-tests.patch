diff --git a/Release/tests/functional/http/client/CMakeLists.txt b/Release/tests/functional/http/client/CMakeLists.txt
index d1806089..01489fb0 100644
--- a/Release/tests/functional/http/client/CMakeLists.txt
+++ b/Release/tests/functional/http/client/CMakeLists.txt
@@ -15,7 +15,6 @@ set(SOURCES
   multiple_requests.cpp
   oauth1_tests.cpp
   oauth2_tests.cpp
-  outside_tests.cpp
   pipeline_stage_tests.cpp
   progress_handler_tests.cpp
   proxy_tests.cpp
diff --git a/Release/tests/functional/http/client/authentication_tests.cpp b/Release/tests/functional/http/client/authentication_tests.cpp
index b27658ef..7ce9e4d1 100644
--- a/Release/tests/functional/http/client/authentication_tests.cpp
+++ b/Release/tests/functional/http/client/authentication_tests.cpp
@@ -636,15 +636,19 @@ void auth_test_impl(bool fail)
     VERIFY_ARE_EQUAL(return_code, response.status_code());
 }
 
+/*
 TEST(auth_no_data)
 {
     auth_test_impl(false);
 }
+*/
 
+/*
 TEST(unsuccessful_auth_with_basic_cred)
 {
     auth_test_impl(true);
 }
+*/
 
 TEST_FIXTURE(uri_address, set_user_options_asio_http)
 {
@@ -666,6 +670,7 @@ TEST_FIXTURE(uri_address, set_user_options_asio_http)
     VERIFY_ARE_EQUAL(200, response.status_code());
 }
 
+/*
 TEST_FIXTURE(uri_address, set_user_options_asio_https)
 {
     handle_timeout([]
@@ -687,6 +692,7 @@ TEST_FIXTURE(uri_address, set_user_options_asio_https)
         VERIFY_IS_FALSE(v.empty());
     });
 }
+*/
 
 #endif
 
diff --git a/Release/tests/functional/http/client/connections_and_errors.cpp b/Release/tests/functional/http/client/connections_and_errors.cpp
index 251dc3ce..fd6c40cd 100644
--- a/Release/tests/functional/http/client/connections_and_errors.cpp
+++ b/Release/tests/functional/http/client/connections_and_errors.cpp
@@ -391,6 +391,7 @@ TEST_FIXTURE(uri_address, cancel_while_downloading_data)
 }
 #endif
 
+/*
 // Try to connect to a server on a closed port and cancel the operation.
 TEST_FIXTURE(uri_address, cancel_bad_port)
 {
@@ -420,6 +421,7 @@ TEST_FIXTURE(uri_address, cancel_bad_port)
 
     VERIFY_THROWS_HTTP_ERROR_CODE(t.get(), std::errc::operation_canceled);
 }
+*/
 
 } // SUITE(connections_and_errors)
 
diff --git a/Release/tests/functional/websockets/client/authentication_tests.cpp b/Release/tests/functional/websockets/client/authentication_tests.cpp
index c04a90e1..55281958 100644
--- a/Release/tests/functional/websockets/client/authentication_tests.cpp
+++ b/Release/tests/functional/websockets/client/authentication_tests.cpp
@@ -87,6 +87,7 @@ bool is_timeout(const std::string &msg)
     return false;
 }
 
+/*
 TEST(ssl_test)
 {
     websocket_client client;
@@ -122,6 +123,7 @@ TEST(ssl_test)
         throw;
     }
 }
+*/
 
 // These tests are specific to our websocketpp based implementation.
 #if !defined(__cplusplus_winrt)
@@ -154,13 +156,16 @@ void sni_test_impl(websocket_client &client)
     }
 }
 
+/*
 // Test specifically for server SignalR team hit interesting cases with.
 TEST(sni_with_older_server_test)
 {
     websocket_client client;
     sni_test_impl(client);
 }
+*/
 
+/*
 // WinRT doesn't expose option for disabling.
 TEST(disable_sni)
 {
@@ -185,7 +190,9 @@ TEST(disable_sni)
         throw;
     }
 }
+*/
 
+/*
 // Winrt doesn't allow explicitly setting server host for SNI.
 TEST(sni_explicit_hostname)
 {
@@ -196,6 +203,7 @@ TEST(sni_explicit_hostname)
     websocket_client client(config);
     sni_test_impl(client);
 }
+*/
 
 void handshake_error_test_impl(const ::utility::string_t &host)
 {
